"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v3.19.1
// source: eduapi.proto
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SISSyncClient = exports.SISSyncService = exports.SyncReset = exports.SyncEvent = exports.Course = exports.Person = exports.Agents = exports.TypedAddress = exports.OptionallyTypedAddress = exports.GeoCoordinates = exports.TypedPhone = exports.OptionallyTypedPhone = exports.TypedEmail = exports.OptionallyTypedEmail = exports.PersonNameEntry = exports.PersonName = exports.LanguageTypedString = exports.IdentifierEntry = exports.SyncRequest = exports.protobufPackage = void 0;
/* eslint-disable */
const grpc_js_1 = require("@grpc/grpc-js");
const minimal_1 = __importDefault(require("protobufjs/minimal"));
exports.protobufPackage = "eduapi.async";
function createBaseSyncRequest() {
    return { filter: "" };
}
exports.SyncRequest = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.filter !== "") {
            writer.uint32(10).string(message.filter);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSyncRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.filter = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { filter: isSet(object.filter) ? globalThis.String(object.filter) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.filter !== "") {
            obj.filter = message.filter;
        }
        return obj;
    },
    create(base) {
        return exports.SyncRequest.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSyncRequest();
        message.filter = object.filter ?? "";
        return message;
    },
};
function createBaseIdentifierEntry() {
    return { identifier: "", identifierType: "" };
}
exports.IdentifierEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.identifier !== "") {
            writer.uint32(10).string(message.identifier);
        }
        if (message.identifierType !== "") {
            writer.uint32(18).string(message.identifierType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIdentifierEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.identifier = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.identifierType = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            identifier: isSet(object.identifier) ? globalThis.String(object.identifier) : "",
            identifierType: isSet(object.identifierType) ? globalThis.String(object.identifierType) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.identifier !== "") {
            obj.identifier = message.identifier;
        }
        if (message.identifierType !== "") {
            obj.identifierType = message.identifierType;
        }
        return obj;
    },
    create(base) {
        return exports.IdentifierEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseIdentifierEntry();
        message.identifier = object.identifier ?? "";
        message.identifierType = object.identifierType ?? "";
        return message;
    },
};
function createBaseLanguageTypedString() {
    return { recordLanguage: "", value: "" };
}
exports.LanguageTypedString = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.recordLanguage !== "") {
            writer.uint32(10).string(message.recordLanguage);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLanguageTypedString();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.recordLanguage = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            recordLanguage: isSet(object.recordLanguage) ? globalThis.String(object.recordLanguage) : "",
            value: isSet(object.value) ? globalThis.String(object.value) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.recordLanguage !== "") {
            obj.recordLanguage = message.recordLanguage;
        }
        if (message.value !== "") {
            obj.value = message.value;
        }
        return obj;
    },
    create(base) {
        return exports.LanguageTypedString.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseLanguageTypedString();
        message.recordLanguage = object.recordLanguage ?? "";
        message.value = object.value ?? "";
        return message;
    },
};
function createBasePersonName() {
    return {
        familyName: "",
        givenName: "",
        additionalName: "",
        patronymicName: "",
        honorificPrefix: "",
        honorificSuffix: "",
        familyNamePrefix: "",
    };
}
exports.PersonName = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.familyName !== "") {
            writer.uint32(10).string(message.familyName);
        }
        if (message.givenName !== "") {
            writer.uint32(18).string(message.givenName);
        }
        if (message.additionalName !== "") {
            writer.uint32(26).string(message.additionalName);
        }
        if (message.patronymicName !== "") {
            writer.uint32(34).string(message.patronymicName);
        }
        if (message.honorificPrefix !== "") {
            writer.uint32(42).string(message.honorificPrefix);
        }
        if (message.honorificSuffix !== "") {
            writer.uint32(50).string(message.honorificSuffix);
        }
        if (message.familyNamePrefix !== "") {
            writer.uint32(58).string(message.familyNamePrefix);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePersonName();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.familyName = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.givenName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.additionalName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.patronymicName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.honorificPrefix = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.honorificSuffix = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.familyNamePrefix = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            familyName: isSet(object.familyName) ? globalThis.String(object.familyName) : "",
            givenName: isSet(object.givenName) ? globalThis.String(object.givenName) : "",
            additionalName: isSet(object.additionalName) ? globalThis.String(object.additionalName) : "",
            patronymicName: isSet(object.patronymicName) ? globalThis.String(object.patronymicName) : "",
            honorificPrefix: isSet(object.honorificPrefix) ? globalThis.String(object.honorificPrefix) : "",
            honorificSuffix: isSet(object.honorificSuffix) ? globalThis.String(object.honorificSuffix) : "",
            familyNamePrefix: isSet(object.familyNamePrefix) ? globalThis.String(object.familyNamePrefix) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.familyName !== "") {
            obj.familyName = message.familyName;
        }
        if (message.givenName !== "") {
            obj.givenName = message.givenName;
        }
        if (message.additionalName !== "") {
            obj.additionalName = message.additionalName;
        }
        if (message.patronymicName !== "") {
            obj.patronymicName = message.patronymicName;
        }
        if (message.honorificPrefix !== "") {
            obj.honorificPrefix = message.honorificPrefix;
        }
        if (message.honorificSuffix !== "") {
            obj.honorificSuffix = message.honorificSuffix;
        }
        if (message.familyNamePrefix !== "") {
            obj.familyNamePrefix = message.familyNamePrefix;
        }
        return obj;
    },
    create(base) {
        return exports.PersonName.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePersonName();
        message.familyName = object.familyName ?? "";
        message.givenName = object.givenName ?? "";
        message.additionalName = object.additionalName ?? "";
        message.patronymicName = object.patronymicName ?? "";
        message.honorificPrefix = object.honorificPrefix ?? "";
        message.honorificSuffix = object.honorificSuffix ?? "";
        message.familyNamePrefix = object.familyNamePrefix ?? "";
        return message;
    },
};
function createBasePersonNameEntry() {
    return {
        nameType: "",
        familyName: "",
        givenName: "",
        additionalName: "",
        patronymicName: "",
        honorificPrefix: "",
        honorificSuffix: "",
        familyNamePrefix: "",
    };
}
exports.PersonNameEntry = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.nameType !== "") {
            writer.uint32(10).string(message.nameType);
        }
        if (message.familyName !== "") {
            writer.uint32(18).string(message.familyName);
        }
        if (message.givenName !== "") {
            writer.uint32(26).string(message.givenName);
        }
        if (message.additionalName !== "") {
            writer.uint32(34).string(message.additionalName);
        }
        if (message.patronymicName !== "") {
            writer.uint32(42).string(message.patronymicName);
        }
        if (message.honorificPrefix !== "") {
            writer.uint32(50).string(message.honorificPrefix);
        }
        if (message.honorificSuffix !== "") {
            writer.uint32(58).string(message.honorificSuffix);
        }
        if (message.familyNamePrefix !== "") {
            writer.uint32(66).string(message.familyNamePrefix);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePersonNameEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.nameType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.familyName = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.givenName = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.additionalName = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.patronymicName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.honorificPrefix = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.honorificSuffix = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.familyNamePrefix = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            nameType: isSet(object.nameType) ? globalThis.String(object.nameType) : "",
            familyName: isSet(object.familyName) ? globalThis.String(object.familyName) : "",
            givenName: isSet(object.givenName) ? globalThis.String(object.givenName) : "",
            additionalName: isSet(object.additionalName) ? globalThis.String(object.additionalName) : "",
            patronymicName: isSet(object.patronymicName) ? globalThis.String(object.patronymicName) : "",
            honorificPrefix: isSet(object.honorificPrefix) ? globalThis.String(object.honorificPrefix) : "",
            honorificSuffix: isSet(object.honorificSuffix) ? globalThis.String(object.honorificSuffix) : "",
            familyNamePrefix: isSet(object.familyNamePrefix) ? globalThis.String(object.familyNamePrefix) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.nameType !== "") {
            obj.nameType = message.nameType;
        }
        if (message.familyName !== "") {
            obj.familyName = message.familyName;
        }
        if (message.givenName !== "") {
            obj.givenName = message.givenName;
        }
        if (message.additionalName !== "") {
            obj.additionalName = message.additionalName;
        }
        if (message.patronymicName !== "") {
            obj.patronymicName = message.patronymicName;
        }
        if (message.honorificPrefix !== "") {
            obj.honorificPrefix = message.honorificPrefix;
        }
        if (message.honorificSuffix !== "") {
            obj.honorificSuffix = message.honorificSuffix;
        }
        if (message.familyNamePrefix !== "") {
            obj.familyNamePrefix = message.familyNamePrefix;
        }
        return obj;
    },
    create(base) {
        return exports.PersonNameEntry.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePersonNameEntry();
        message.nameType = object.nameType ?? "";
        message.familyName = object.familyName ?? "";
        message.givenName = object.givenName ?? "";
        message.additionalName = object.additionalName ?? "";
        message.patronymicName = object.patronymicName ?? "";
        message.honorificPrefix = object.honorificPrefix ?? "";
        message.honorificSuffix = object.honorificSuffix ?? "";
        message.familyNamePrefix = object.familyNamePrefix ?? "";
        return message;
    },
};
function createBaseOptionallyTypedEmail() {
    return { emailType: "", email: "" };
}
exports.OptionallyTypedEmail = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.emailType !== "") {
            writer.uint32(10).string(message.emailType);
        }
        if (message.email !== "") {
            writer.uint32(18).string(message.email);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOptionallyTypedEmail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.emailType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emailType: isSet(object.emailType) ? globalThis.String(object.emailType) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.emailType !== "") {
            obj.emailType = message.emailType;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        return obj;
    },
    create(base) {
        return exports.OptionallyTypedEmail.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOptionallyTypedEmail();
        message.emailType = object.emailType ?? "";
        message.email = object.email ?? "";
        return message;
    },
};
function createBaseTypedEmail() {
    return { emailType: "", email: "" };
}
exports.TypedEmail = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.emailType !== "") {
            writer.uint32(10).string(message.emailType);
        }
        if (message.email !== "") {
            writer.uint32(18).string(message.email);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTypedEmail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.emailType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.email = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            emailType: isSet(object.emailType) ? globalThis.String(object.emailType) : "",
            email: isSet(object.email) ? globalThis.String(object.email) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.emailType !== "") {
            obj.emailType = message.emailType;
        }
        if (message.email !== "") {
            obj.email = message.email;
        }
        return obj;
    },
    create(base) {
        return exports.TypedEmail.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTypedEmail();
        message.emailType = object.emailType ?? "";
        message.email = object.email ?? "";
        return message;
    },
};
function createBaseOptionallyTypedPhone() {
    return { phoneType: "", phone: "" };
}
exports.OptionallyTypedPhone = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.phoneType !== "") {
            writer.uint32(10).string(message.phoneType);
        }
        if (message.phone !== "") {
            writer.uint32(18).string(message.phone);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOptionallyTypedPhone();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.phoneType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            phoneType: isSet(object.phoneType) ? globalThis.String(object.phoneType) : "",
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.phoneType !== "") {
            obj.phoneType = message.phoneType;
        }
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        return obj;
    },
    create(base) {
        return exports.OptionallyTypedPhone.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOptionallyTypedPhone();
        message.phoneType = object.phoneType ?? "";
        message.phone = object.phone ?? "";
        return message;
    },
};
function createBaseTypedPhone() {
    return { phoneType: "", phone: "" };
}
exports.TypedPhone = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.phoneType !== "") {
            writer.uint32(10).string(message.phoneType);
        }
        if (message.phone !== "") {
            writer.uint32(18).string(message.phone);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTypedPhone();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.phoneType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.phone = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            phoneType: isSet(object.phoneType) ? globalThis.String(object.phoneType) : "",
            phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.phoneType !== "") {
            obj.phoneType = message.phoneType;
        }
        if (message.phone !== "") {
            obj.phone = message.phone;
        }
        return obj;
    },
    create(base) {
        return exports.TypedPhone.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTypedPhone();
        message.phoneType = object.phoneType ?? "";
        message.phone = object.phone ?? "";
        return message;
    },
};
function createBaseGeoCoordinates() {
    return { latitude: 0, longitude: 0 };
}
exports.GeoCoordinates = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.latitude !== 0) {
            writer.uint32(9).double(message.latitude);
        }
        if (message.longitude !== 0) {
            writer.uint32(17).double(message.longitude);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGeoCoordinates();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 9) {
                        break;
                    }
                    message.latitude = reader.double();
                    continue;
                case 2:
                    if (tag !== 17) {
                        break;
                    }
                    message.longitude = reader.double();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
            longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.latitude !== 0) {
            obj.latitude = message.latitude;
        }
        if (message.longitude !== 0) {
            obj.longitude = message.longitude;
        }
        return obj;
    },
    create(base) {
        return exports.GeoCoordinates.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseGeoCoordinates();
        message.latitude = object.latitude ?? 0;
        message.longitude = object.longitude ?? 0;
        return message;
    },
};
function createBaseOptionallyTypedAddress() {
    return {
        addressType: "",
        addressCountry: "",
        addressCountryCode: "",
        addressRegion: "",
        addressLocality: "",
        streetAddress: "",
        postOfficeBoxNumber: "",
        postalCode: "",
        geo: undefined,
    };
}
exports.OptionallyTypedAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.addressType !== "") {
            writer.uint32(10).string(message.addressType);
        }
        if (message.addressCountry !== "") {
            writer.uint32(18).string(message.addressCountry);
        }
        if (message.addressCountryCode !== "") {
            writer.uint32(26).string(message.addressCountryCode);
        }
        if (message.addressRegion !== "") {
            writer.uint32(34).string(message.addressRegion);
        }
        if (message.addressLocality !== "") {
            writer.uint32(42).string(message.addressLocality);
        }
        if (message.streetAddress !== "") {
            writer.uint32(50).string(message.streetAddress);
        }
        if (message.postOfficeBoxNumber !== "") {
            writer.uint32(58).string(message.postOfficeBoxNumber);
        }
        if (message.postalCode !== "") {
            writer.uint32(66).string(message.postalCode);
        }
        if (message.geo !== undefined) {
            exports.GeoCoordinates.encode(message.geo, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOptionallyTypedAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.addressType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.addressCountry = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.addressCountryCode = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.addressRegion = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.addressLocality = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.streetAddress = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.postOfficeBoxNumber = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.postalCode = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.geo = exports.GeoCoordinates.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            addressType: isSet(object.addressType) ? globalThis.String(object.addressType) : "",
            addressCountry: isSet(object.addressCountry) ? globalThis.String(object.addressCountry) : "",
            addressCountryCode: isSet(object.addressCountryCode) ? globalThis.String(object.addressCountryCode) : "",
            addressRegion: isSet(object.addressRegion) ? globalThis.String(object.addressRegion) : "",
            addressLocality: isSet(object.addressLocality) ? globalThis.String(object.addressLocality) : "",
            streetAddress: isSet(object.streetAddress) ? globalThis.String(object.streetAddress) : "",
            postOfficeBoxNumber: isSet(object.postOfficeBoxNumber) ? globalThis.String(object.postOfficeBoxNumber) : "",
            postalCode: isSet(object.postalCode) ? globalThis.String(object.postalCode) : "",
            geo: isSet(object.geo) ? exports.GeoCoordinates.fromJSON(object.geo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.addressType !== "") {
            obj.addressType = message.addressType;
        }
        if (message.addressCountry !== "") {
            obj.addressCountry = message.addressCountry;
        }
        if (message.addressCountryCode !== "") {
            obj.addressCountryCode = message.addressCountryCode;
        }
        if (message.addressRegion !== "") {
            obj.addressRegion = message.addressRegion;
        }
        if (message.addressLocality !== "") {
            obj.addressLocality = message.addressLocality;
        }
        if (message.streetAddress !== "") {
            obj.streetAddress = message.streetAddress;
        }
        if (message.postOfficeBoxNumber !== "") {
            obj.postOfficeBoxNumber = message.postOfficeBoxNumber;
        }
        if (message.postalCode !== "") {
            obj.postalCode = message.postalCode;
        }
        if (message.geo !== undefined) {
            obj.geo = exports.GeoCoordinates.toJSON(message.geo);
        }
        return obj;
    },
    create(base) {
        return exports.OptionallyTypedAddress.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseOptionallyTypedAddress();
        message.addressType = object.addressType ?? "";
        message.addressCountry = object.addressCountry ?? "";
        message.addressCountryCode = object.addressCountryCode ?? "";
        message.addressRegion = object.addressRegion ?? "";
        message.addressLocality = object.addressLocality ?? "";
        message.streetAddress = object.streetAddress ?? "";
        message.postOfficeBoxNumber = object.postOfficeBoxNumber ?? "";
        message.postalCode = object.postalCode ?? "";
        message.geo = (object.geo !== undefined && object.geo !== null)
            ? exports.GeoCoordinates.fromPartial(object.geo)
            : undefined;
        return message;
    },
};
function createBaseTypedAddress() {
    return {
        addressType: "",
        addressCountry: "",
        addressCountryCode: "",
        addressRegion: "",
        addressLocality: "",
        streetAddress: "",
        postOfficeBoxNumber: "",
        postalCode: "",
        geo: undefined,
    };
}
exports.TypedAddress = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.addressType !== "") {
            writer.uint32(10).string(message.addressType);
        }
        if (message.addressCountry !== "") {
            writer.uint32(18).string(message.addressCountry);
        }
        if (message.addressCountryCode !== "") {
            writer.uint32(26).string(message.addressCountryCode);
        }
        if (message.addressRegion !== "") {
            writer.uint32(34).string(message.addressRegion);
        }
        if (message.addressLocality !== "") {
            writer.uint32(42).string(message.addressLocality);
        }
        if (message.streetAddress !== "") {
            writer.uint32(50).string(message.streetAddress);
        }
        if (message.postOfficeBoxNumber !== "") {
            writer.uint32(58).string(message.postOfficeBoxNumber);
        }
        if (message.postalCode !== "") {
            writer.uint32(66).string(message.postalCode);
        }
        if (message.geo !== undefined) {
            exports.GeoCoordinates.encode(message.geo, writer.uint32(74).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTypedAddress();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.addressType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.addressCountry = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.addressCountryCode = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.addressRegion = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.addressLocality = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.streetAddress = reader.string();
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.postOfficeBoxNumber = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.postalCode = reader.string();
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.geo = exports.GeoCoordinates.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            addressType: isSet(object.addressType) ? globalThis.String(object.addressType) : "",
            addressCountry: isSet(object.addressCountry) ? globalThis.String(object.addressCountry) : "",
            addressCountryCode: isSet(object.addressCountryCode) ? globalThis.String(object.addressCountryCode) : "",
            addressRegion: isSet(object.addressRegion) ? globalThis.String(object.addressRegion) : "",
            addressLocality: isSet(object.addressLocality) ? globalThis.String(object.addressLocality) : "",
            streetAddress: isSet(object.streetAddress) ? globalThis.String(object.streetAddress) : "",
            postOfficeBoxNumber: isSet(object.postOfficeBoxNumber) ? globalThis.String(object.postOfficeBoxNumber) : "",
            postalCode: isSet(object.postalCode) ? globalThis.String(object.postalCode) : "",
            geo: isSet(object.geo) ? exports.GeoCoordinates.fromJSON(object.geo) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.addressType !== "") {
            obj.addressType = message.addressType;
        }
        if (message.addressCountry !== "") {
            obj.addressCountry = message.addressCountry;
        }
        if (message.addressCountryCode !== "") {
            obj.addressCountryCode = message.addressCountryCode;
        }
        if (message.addressRegion !== "") {
            obj.addressRegion = message.addressRegion;
        }
        if (message.addressLocality !== "") {
            obj.addressLocality = message.addressLocality;
        }
        if (message.streetAddress !== "") {
            obj.streetAddress = message.streetAddress;
        }
        if (message.postOfficeBoxNumber !== "") {
            obj.postOfficeBoxNumber = message.postOfficeBoxNumber;
        }
        if (message.postalCode !== "") {
            obj.postalCode = message.postalCode;
        }
        if (message.geo !== undefined) {
            obj.geo = exports.GeoCoordinates.toJSON(message.geo);
        }
        return obj;
    },
    create(base) {
        return exports.TypedAddress.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseTypedAddress();
        message.addressType = object.addressType ?? "";
        message.addressCountry = object.addressCountry ?? "";
        message.addressCountryCode = object.addressCountryCode ?? "";
        message.addressRegion = object.addressRegion ?? "";
        message.addressLocality = object.addressLocality ?? "";
        message.streetAddress = object.streetAddress ?? "";
        message.postOfficeBoxNumber = object.postOfficeBoxNumber ?? "";
        message.postalCode = object.postalCode ?? "";
        message.geo = (object.geo !== undefined && object.geo !== null)
            ? exports.GeoCoordinates.fromPartial(object.geo)
            : undefined;
        return message;
    },
};
function createBaseAgents() {
    return { agentType: "", person: "", description: [], domain: "" };
}
exports.Agents = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.agentType !== "") {
            writer.uint32(10).string(message.agentType);
        }
        if (message.person !== "") {
            writer.uint32(18).string(message.person);
        }
        for (const v of message.description) {
            exports.LanguageTypedString.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.domain !== "") {
            writer.uint32(34).string(message.domain);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAgents();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.agentType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.person = reader.string();
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.description.push(exports.LanguageTypedString.decode(reader, reader.uint32()));
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.domain = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            agentType: isSet(object.agentType) ? globalThis.String(object.agentType) : "",
            person: isSet(object.person) ? globalThis.String(object.person) : "",
            description: globalThis.Array.isArray(object?.description)
                ? object.description.map((e) => exports.LanguageTypedString.fromJSON(e))
                : [],
            domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.agentType !== "") {
            obj.agentType = message.agentType;
        }
        if (message.person !== "") {
            obj.person = message.person;
        }
        if (message.description?.length) {
            obj.description = message.description.map((e) => exports.LanguageTypedString.toJSON(e));
        }
        if (message.domain !== "") {
            obj.domain = message.domain;
        }
        return obj;
    },
    create(base) {
        return exports.Agents.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseAgents();
        message.agentType = object.agentType ?? "";
        message.person = object.person ?? "";
        message.description = object.description?.map((e) => exports.LanguageTypedString.fromPartial(e)) || [];
        message.domain = object.domain ?? "";
        return message;
    },
};
function createBasePerson() {
    return {
        sourcedId: "",
        otherIdentifiers: [],
        recordLanguage: "",
        legalName: undefined,
        formattedName: "",
        otherNames: [],
        gender: "",
        pronouns: [],
        languagesSpoken: [],
        dateOfBirth: "",
        placeOfBirth: "",
        countryOfBirth: "",
        isDeceased: false,
        dateOfDeath: "",
        primaryEmail: undefined,
        otherEmails: [],
        primaryPhone: undefined,
        otherPhones: [],
        primaryAddress: undefined,
        otherAddresses: [],
        agents: [],
        dateLastModified: "",
        recordStatus: "",
        extensions: "",
    };
}
exports.Person = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.sourcedId !== "") {
            writer.uint32(10).string(message.sourcedId);
        }
        for (const v of message.otherIdentifiers) {
            exports.IdentifierEntry.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.recordLanguage !== "") {
            writer.uint32(26).string(message.recordLanguage);
        }
        if (message.legalName !== undefined) {
            exports.PersonName.encode(message.legalName, writer.uint32(34).fork()).ldelim();
        }
        if (message.formattedName !== "") {
            writer.uint32(42).string(message.formattedName);
        }
        for (const v of message.otherNames) {
            exports.PersonNameEntry.encode(v, writer.uint32(50).fork()).ldelim();
        }
        if (message.gender !== "") {
            writer.uint32(58).string(message.gender);
        }
        for (const v of message.pronouns) {
            exports.LanguageTypedString.encode(v, writer.uint32(66).fork()).ldelim();
        }
        for (const v of message.languagesSpoken) {
            writer.uint32(74).string(v);
        }
        if (message.dateOfBirth !== "") {
            writer.uint32(82).string(message.dateOfBirth);
        }
        if (message.placeOfBirth !== "") {
            writer.uint32(90).string(message.placeOfBirth);
        }
        if (message.countryOfBirth !== "") {
            writer.uint32(98).string(message.countryOfBirth);
        }
        if (message.isDeceased !== false) {
            writer.uint32(104).bool(message.isDeceased);
        }
        if (message.dateOfDeath !== "") {
            writer.uint32(114).string(message.dateOfDeath);
        }
        if (message.primaryEmail !== undefined) {
            exports.OptionallyTypedEmail.encode(message.primaryEmail, writer.uint32(122).fork()).ldelim();
        }
        for (const v of message.otherEmails) {
            exports.TypedEmail.encode(v, writer.uint32(130).fork()).ldelim();
        }
        if (message.primaryPhone !== undefined) {
            exports.OptionallyTypedPhone.encode(message.primaryPhone, writer.uint32(138).fork()).ldelim();
        }
        for (const v of message.otherPhones) {
            exports.TypedPhone.encode(v, writer.uint32(146).fork()).ldelim();
        }
        if (message.primaryAddress !== undefined) {
            exports.OptionallyTypedAddress.encode(message.primaryAddress, writer.uint32(154).fork()).ldelim();
        }
        for (const v of message.otherAddresses) {
            exports.TypedAddress.encode(v, writer.uint32(162).fork()).ldelim();
        }
        for (const v of message.agents) {
            exports.Agents.encode(v, writer.uint32(170).fork()).ldelim();
        }
        if (message.dateLastModified !== "") {
            writer.uint32(178).string(message.dateLastModified);
        }
        if (message.recordStatus !== "") {
            writer.uint32(186).string(message.recordStatus);
        }
        if (message.extensions !== "") {
            writer.uint32(194).string(message.extensions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePerson();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.sourcedId = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.otherIdentifiers.push(exports.IdentifierEntry.decode(reader, reader.uint32()));
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.recordLanguage = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.legalName = exports.PersonName.decode(reader, reader.uint32());
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.formattedName = reader.string();
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.otherNames.push(exports.PersonNameEntry.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.gender = reader.string();
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.pronouns.push(exports.LanguageTypedString.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.languagesSpoken.push(reader.string());
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.dateOfBirth = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.placeOfBirth = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.countryOfBirth = reader.string();
                    continue;
                case 13:
                    if (tag !== 104) {
                        break;
                    }
                    message.isDeceased = reader.bool();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.dateOfDeath = reader.string();
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.primaryEmail = exports.OptionallyTypedEmail.decode(reader, reader.uint32());
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.otherEmails.push(exports.TypedEmail.decode(reader, reader.uint32()));
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.primaryPhone = exports.OptionallyTypedPhone.decode(reader, reader.uint32());
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.otherPhones.push(exports.TypedPhone.decode(reader, reader.uint32()));
                    continue;
                case 19:
                    if (tag !== 154) {
                        break;
                    }
                    message.primaryAddress = exports.OptionallyTypedAddress.decode(reader, reader.uint32());
                    continue;
                case 20:
                    if (tag !== 162) {
                        break;
                    }
                    message.otherAddresses.push(exports.TypedAddress.decode(reader, reader.uint32()));
                    continue;
                case 21:
                    if (tag !== 170) {
                        break;
                    }
                    message.agents.push(exports.Agents.decode(reader, reader.uint32()));
                    continue;
                case 22:
                    if (tag !== 178) {
                        break;
                    }
                    message.dateLastModified = reader.string();
                    continue;
                case 23:
                    if (tag !== 186) {
                        break;
                    }
                    message.recordStatus = reader.string();
                    continue;
                case 24:
                    if (tag !== 194) {
                        break;
                    }
                    message.extensions = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            sourcedId: isSet(object.sourcedId) ? globalThis.String(object.sourcedId) : "",
            otherIdentifiers: globalThis.Array.isArray(object?.otherIdentifiers)
                ? object.otherIdentifiers.map((e) => exports.IdentifierEntry.fromJSON(e))
                : [],
            recordLanguage: isSet(object.recordLanguage) ? globalThis.String(object.recordLanguage) : "",
            legalName: isSet(object.legalName) ? exports.PersonName.fromJSON(object.legalName) : undefined,
            formattedName: isSet(object.formattedName) ? globalThis.String(object.formattedName) : "",
            otherNames: globalThis.Array.isArray(object?.otherNames)
                ? object.otherNames.map((e) => exports.PersonNameEntry.fromJSON(e))
                : [],
            gender: isSet(object.gender) ? globalThis.String(object.gender) : "",
            pronouns: globalThis.Array.isArray(object?.pronouns)
                ? object.pronouns.map((e) => exports.LanguageTypedString.fromJSON(e))
                : [],
            languagesSpoken: globalThis.Array.isArray(object?.languagesSpoken)
                ? object.languagesSpoken.map((e) => globalThis.String(e))
                : [],
            dateOfBirth: isSet(object.dateOfBirth) ? globalThis.String(object.dateOfBirth) : "",
            placeOfBirth: isSet(object.placeOfBirth) ? globalThis.String(object.placeOfBirth) : "",
            countryOfBirth: isSet(object.countryOfBirth) ? globalThis.String(object.countryOfBirth) : "",
            isDeceased: isSet(object.isDeceased) ? globalThis.Boolean(object.isDeceased) : false,
            dateOfDeath: isSet(object.dateOfDeath) ? globalThis.String(object.dateOfDeath) : "",
            primaryEmail: isSet(object.primaryEmail) ? exports.OptionallyTypedEmail.fromJSON(object.primaryEmail) : undefined,
            otherEmails: globalThis.Array.isArray(object?.otherEmails)
                ? object.otherEmails.map((e) => exports.TypedEmail.fromJSON(e))
                : [],
            primaryPhone: isSet(object.primaryPhone) ? exports.OptionallyTypedPhone.fromJSON(object.primaryPhone) : undefined,
            otherPhones: globalThis.Array.isArray(object?.otherPhones)
                ? object.otherPhones.map((e) => exports.TypedPhone.fromJSON(e))
                : [],
            primaryAddress: isSet(object.primaryAddress) ? exports.OptionallyTypedAddress.fromJSON(object.primaryAddress) : undefined,
            otherAddresses: globalThis.Array.isArray(object?.otherAddresses)
                ? object.otherAddresses.map((e) => exports.TypedAddress.fromJSON(e))
                : [],
            agents: globalThis.Array.isArray(object?.agents) ? object.agents.map((e) => exports.Agents.fromJSON(e)) : [],
            dateLastModified: isSet(object.dateLastModified) ? globalThis.String(object.dateLastModified) : "",
            recordStatus: isSet(object.recordStatus) ? globalThis.String(object.recordStatus) : "",
            extensions: isSet(object.extensions) ? globalThis.String(object.extensions) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.sourcedId !== "") {
            obj.sourcedId = message.sourcedId;
        }
        if (message.otherIdentifiers?.length) {
            obj.otherIdentifiers = message.otherIdentifiers.map((e) => exports.IdentifierEntry.toJSON(e));
        }
        if (message.recordLanguage !== "") {
            obj.recordLanguage = message.recordLanguage;
        }
        if (message.legalName !== undefined) {
            obj.legalName = exports.PersonName.toJSON(message.legalName);
        }
        if (message.formattedName !== "") {
            obj.formattedName = message.formattedName;
        }
        if (message.otherNames?.length) {
            obj.otherNames = message.otherNames.map((e) => exports.PersonNameEntry.toJSON(e));
        }
        if (message.gender !== "") {
            obj.gender = message.gender;
        }
        if (message.pronouns?.length) {
            obj.pronouns = message.pronouns.map((e) => exports.LanguageTypedString.toJSON(e));
        }
        if (message.languagesSpoken?.length) {
            obj.languagesSpoken = message.languagesSpoken;
        }
        if (message.dateOfBirth !== "") {
            obj.dateOfBirth = message.dateOfBirth;
        }
        if (message.placeOfBirth !== "") {
            obj.placeOfBirth = message.placeOfBirth;
        }
        if (message.countryOfBirth !== "") {
            obj.countryOfBirth = message.countryOfBirth;
        }
        if (message.isDeceased !== false) {
            obj.isDeceased = message.isDeceased;
        }
        if (message.dateOfDeath !== "") {
            obj.dateOfDeath = message.dateOfDeath;
        }
        if (message.primaryEmail !== undefined) {
            obj.primaryEmail = exports.OptionallyTypedEmail.toJSON(message.primaryEmail);
        }
        if (message.otherEmails?.length) {
            obj.otherEmails = message.otherEmails.map((e) => exports.TypedEmail.toJSON(e));
        }
        if (message.primaryPhone !== undefined) {
            obj.primaryPhone = exports.OptionallyTypedPhone.toJSON(message.primaryPhone);
        }
        if (message.otherPhones?.length) {
            obj.otherPhones = message.otherPhones.map((e) => exports.TypedPhone.toJSON(e));
        }
        if (message.primaryAddress !== undefined) {
            obj.primaryAddress = exports.OptionallyTypedAddress.toJSON(message.primaryAddress);
        }
        if (message.otherAddresses?.length) {
            obj.otherAddresses = message.otherAddresses.map((e) => exports.TypedAddress.toJSON(e));
        }
        if (message.agents?.length) {
            obj.agents = message.agents.map((e) => exports.Agents.toJSON(e));
        }
        if (message.dateLastModified !== "") {
            obj.dateLastModified = message.dateLastModified;
        }
        if (message.recordStatus !== "") {
            obj.recordStatus = message.recordStatus;
        }
        if (message.extensions !== "") {
            obj.extensions = message.extensions;
        }
        return obj;
    },
    create(base) {
        return exports.Person.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBasePerson();
        message.sourcedId = object.sourcedId ?? "";
        message.otherIdentifiers = object.otherIdentifiers?.map((e) => exports.IdentifierEntry.fromPartial(e)) || [];
        message.recordLanguage = object.recordLanguage ?? "";
        message.legalName = (object.legalName !== undefined && object.legalName !== null)
            ? exports.PersonName.fromPartial(object.legalName)
            : undefined;
        message.formattedName = object.formattedName ?? "";
        message.otherNames = object.otherNames?.map((e) => exports.PersonNameEntry.fromPartial(e)) || [];
        message.gender = object.gender ?? "";
        message.pronouns = object.pronouns?.map((e) => exports.LanguageTypedString.fromPartial(e)) || [];
        message.languagesSpoken = object.languagesSpoken?.map((e) => e) || [];
        message.dateOfBirth = object.dateOfBirth ?? "";
        message.placeOfBirth = object.placeOfBirth ?? "";
        message.countryOfBirth = object.countryOfBirth ?? "";
        message.isDeceased = object.isDeceased ?? false;
        message.dateOfDeath = object.dateOfDeath ?? "";
        message.primaryEmail = (object.primaryEmail !== undefined && object.primaryEmail !== null)
            ? exports.OptionallyTypedEmail.fromPartial(object.primaryEmail)
            : undefined;
        message.otherEmails = object.otherEmails?.map((e) => exports.TypedEmail.fromPartial(e)) || [];
        message.primaryPhone = (object.primaryPhone !== undefined && object.primaryPhone !== null)
            ? exports.OptionallyTypedPhone.fromPartial(object.primaryPhone)
            : undefined;
        message.otherPhones = object.otherPhones?.map((e) => exports.TypedPhone.fromPartial(e)) || [];
        message.primaryAddress = (object.primaryAddress !== undefined && object.primaryAddress !== null)
            ? exports.OptionallyTypedAddress.fromPartial(object.primaryAddress)
            : undefined;
        message.otherAddresses = object.otherAddresses?.map((e) => exports.TypedAddress.fromPartial(e)) || [];
        message.agents = object.agents?.map((e) => exports.Agents.fromPartial(e)) || [];
        message.dateLastModified = object.dateLastModified ?? "";
        message.recordStatus = object.recordStatus ?? "";
        message.extensions = object.extensions ?? "";
        return message;
    },
};
function createBaseCourse() {
    return {
        courseType: "",
        parent: [],
        sourcedId: "",
        recordLanguage: "",
        title: [],
        description: [],
        primaryCode: undefined,
        otherCodes: [],
        organization: "",
        organizationCode: "",
        level: "",
        creditType: "",
        creditsAwarded: "",
        gradingScheme: undefined,
        teachingLanguage: "",
        recordStatus: "",
        dateLastModified: "",
        extensions: "",
    };
}
exports.Course = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.courseType !== "") {
            writer.uint32(10).string(message.courseType);
        }
        for (const v of message.parent) {
            writer.uint32(18).string(v);
        }
        if (message.sourcedId !== "") {
            writer.uint32(26).string(message.sourcedId);
        }
        if (message.recordLanguage !== "") {
            writer.uint32(34).string(message.recordLanguage);
        }
        for (const v of message.title) {
            exports.LanguageTypedString.encode(v, writer.uint32(42).fork()).ldelim();
        }
        for (const v of message.description) {
            exports.LanguageTypedString.encode(v, writer.uint32(50).fork()).ldelim();
        }
        if (message.primaryCode !== undefined) {
            exports.IdentifierEntry.encode(message.primaryCode, writer.uint32(58).fork()).ldelim();
        }
        for (const v of message.otherCodes) {
            exports.IdentifierEntry.encode(v, writer.uint32(66).fork()).ldelim();
        }
        if (message.organization !== "") {
            writer.uint32(74).string(message.organization);
        }
        if (message.organizationCode !== "") {
            writer.uint32(82).string(message.organizationCode);
        }
        if (message.level !== "") {
            writer.uint32(90).string(message.level);
        }
        if (message.creditType !== "") {
            writer.uint32(98).string(message.creditType);
        }
        if (message.creditsAwarded !== "") {
            writer.uint32(106).string(message.creditsAwarded);
        }
        if (message.gradingScheme !== undefined) {
            exports.LanguageTypedString.encode(message.gradingScheme, writer.uint32(114).fork()).ldelim();
        }
        if (message.teachingLanguage !== "") {
            writer.uint32(122).string(message.teachingLanguage);
        }
        if (message.recordStatus !== "") {
            writer.uint32(130).string(message.recordStatus);
        }
        if (message.dateLastModified !== "") {
            writer.uint32(138).string(message.dateLastModified);
        }
        if (message.extensions !== "") {
            writer.uint32(146).string(message.extensions);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCourse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.courseType = reader.string();
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.parent.push(reader.string());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.sourcedId = reader.string();
                    continue;
                case 4:
                    if (tag !== 34) {
                        break;
                    }
                    message.recordLanguage = reader.string();
                    continue;
                case 5:
                    if (tag !== 42) {
                        break;
                    }
                    message.title.push(exports.LanguageTypedString.decode(reader, reader.uint32()));
                    continue;
                case 6:
                    if (tag !== 50) {
                        break;
                    }
                    message.description.push(exports.LanguageTypedString.decode(reader, reader.uint32()));
                    continue;
                case 7:
                    if (tag !== 58) {
                        break;
                    }
                    message.primaryCode = exports.IdentifierEntry.decode(reader, reader.uint32());
                    continue;
                case 8:
                    if (tag !== 66) {
                        break;
                    }
                    message.otherCodes.push(exports.IdentifierEntry.decode(reader, reader.uint32()));
                    continue;
                case 9:
                    if (tag !== 74) {
                        break;
                    }
                    message.organization = reader.string();
                    continue;
                case 10:
                    if (tag !== 82) {
                        break;
                    }
                    message.organizationCode = reader.string();
                    continue;
                case 11:
                    if (tag !== 90) {
                        break;
                    }
                    message.level = reader.string();
                    continue;
                case 12:
                    if (tag !== 98) {
                        break;
                    }
                    message.creditType = reader.string();
                    continue;
                case 13:
                    if (tag !== 106) {
                        break;
                    }
                    message.creditsAwarded = reader.string();
                    continue;
                case 14:
                    if (tag !== 114) {
                        break;
                    }
                    message.gradingScheme = exports.LanguageTypedString.decode(reader, reader.uint32());
                    continue;
                case 15:
                    if (tag !== 122) {
                        break;
                    }
                    message.teachingLanguage = reader.string();
                    continue;
                case 16:
                    if (tag !== 130) {
                        break;
                    }
                    message.recordStatus = reader.string();
                    continue;
                case 17:
                    if (tag !== 138) {
                        break;
                    }
                    message.dateLastModified = reader.string();
                    continue;
                case 18:
                    if (tag !== 146) {
                        break;
                    }
                    message.extensions = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            courseType: isSet(object.courseType) ? globalThis.String(object.courseType) : "",
            parent: globalThis.Array.isArray(object?.parent) ? object.parent.map((e) => globalThis.String(e)) : [],
            sourcedId: isSet(object.sourcedId) ? globalThis.String(object.sourcedId) : "",
            recordLanguage: isSet(object.recordLanguage) ? globalThis.String(object.recordLanguage) : "",
            title: globalThis.Array.isArray(object?.title)
                ? object.title.map((e) => exports.LanguageTypedString.fromJSON(e))
                : [],
            description: globalThis.Array.isArray(object?.description)
                ? object.description.map((e) => exports.LanguageTypedString.fromJSON(e))
                : [],
            primaryCode: isSet(object.primaryCode) ? exports.IdentifierEntry.fromJSON(object.primaryCode) : undefined,
            otherCodes: globalThis.Array.isArray(object?.otherCodes)
                ? object.otherCodes.map((e) => exports.IdentifierEntry.fromJSON(e))
                : [],
            organization: isSet(object.organization) ? globalThis.String(object.organization) : "",
            organizationCode: isSet(object.organizationCode) ? globalThis.String(object.organizationCode) : "",
            level: isSet(object.level) ? globalThis.String(object.level) : "",
            creditType: isSet(object.creditType) ? globalThis.String(object.creditType) : "",
            creditsAwarded: isSet(object.creditsAwarded) ? globalThis.String(object.creditsAwarded) : "",
            gradingScheme: isSet(object.gradingScheme) ? exports.LanguageTypedString.fromJSON(object.gradingScheme) : undefined,
            teachingLanguage: isSet(object.teachingLanguage) ? globalThis.String(object.teachingLanguage) : "",
            recordStatus: isSet(object.recordStatus) ? globalThis.String(object.recordStatus) : "",
            dateLastModified: isSet(object.dateLastModified) ? globalThis.String(object.dateLastModified) : "",
            extensions: isSet(object.extensions) ? globalThis.String(object.extensions) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.courseType !== "") {
            obj.courseType = message.courseType;
        }
        if (message.parent?.length) {
            obj.parent = message.parent;
        }
        if (message.sourcedId !== "") {
            obj.sourcedId = message.sourcedId;
        }
        if (message.recordLanguage !== "") {
            obj.recordLanguage = message.recordLanguage;
        }
        if (message.title?.length) {
            obj.title = message.title.map((e) => exports.LanguageTypedString.toJSON(e));
        }
        if (message.description?.length) {
            obj.description = message.description.map((e) => exports.LanguageTypedString.toJSON(e));
        }
        if (message.primaryCode !== undefined) {
            obj.primaryCode = exports.IdentifierEntry.toJSON(message.primaryCode);
        }
        if (message.otherCodes?.length) {
            obj.otherCodes = message.otherCodes.map((e) => exports.IdentifierEntry.toJSON(e));
        }
        if (message.organization !== "") {
            obj.organization = message.organization;
        }
        if (message.organizationCode !== "") {
            obj.organizationCode = message.organizationCode;
        }
        if (message.level !== "") {
            obj.level = message.level;
        }
        if (message.creditType !== "") {
            obj.creditType = message.creditType;
        }
        if (message.creditsAwarded !== "") {
            obj.creditsAwarded = message.creditsAwarded;
        }
        if (message.gradingScheme !== undefined) {
            obj.gradingScheme = exports.LanguageTypedString.toJSON(message.gradingScheme);
        }
        if (message.teachingLanguage !== "") {
            obj.teachingLanguage = message.teachingLanguage;
        }
        if (message.recordStatus !== "") {
            obj.recordStatus = message.recordStatus;
        }
        if (message.dateLastModified !== "") {
            obj.dateLastModified = message.dateLastModified;
        }
        if (message.extensions !== "") {
            obj.extensions = message.extensions;
        }
        return obj;
    },
    create(base) {
        return exports.Course.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseCourse();
        message.courseType = object.courseType ?? "";
        message.parent = object.parent?.map((e) => e) || [];
        message.sourcedId = object.sourcedId ?? "";
        message.recordLanguage = object.recordLanguage ?? "";
        message.title = object.title?.map((e) => exports.LanguageTypedString.fromPartial(e)) || [];
        message.description = object.description?.map((e) => exports.LanguageTypedString.fromPartial(e)) || [];
        message.primaryCode = (object.primaryCode !== undefined && object.primaryCode !== null)
            ? exports.IdentifierEntry.fromPartial(object.primaryCode)
            : undefined;
        message.otherCodes = object.otherCodes?.map((e) => exports.IdentifierEntry.fromPartial(e)) || [];
        message.organization = object.organization ?? "";
        message.organizationCode = object.organizationCode ?? "";
        message.level = object.level ?? "";
        message.creditType = object.creditType ?? "";
        message.creditsAwarded = object.creditsAwarded ?? "";
        message.gradingScheme = (object.gradingScheme !== undefined && object.gradingScheme !== null)
            ? exports.LanguageTypedString.fromPartial(object.gradingScheme)
            : undefined;
        message.teachingLanguage = object.teachingLanguage ?? "";
        message.recordStatus = object.recordStatus ?? "";
        message.dateLastModified = object.dateLastModified ?? "";
        message.extensions = object.extensions ?? "";
        return message;
    },
};
function createBaseSyncEvent() {
    return { person: undefined, course: undefined, reset: undefined };
}
exports.SyncEvent = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.person !== undefined) {
            exports.Person.encode(message.person, writer.uint32(10).fork()).ldelim();
        }
        if (message.course !== undefined) {
            exports.Course.encode(message.course, writer.uint32(18).fork()).ldelim();
        }
        if (message.reset !== undefined) {
            exports.SyncReset.encode(message.reset, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSyncEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.person = exports.Person.decode(reader, reader.uint32());
                    continue;
                case 2:
                    if (tag !== 18) {
                        break;
                    }
                    message.course = exports.Course.decode(reader, reader.uint32());
                    continue;
                case 3:
                    if (tag !== 26) {
                        break;
                    }
                    message.reset = exports.SyncReset.decode(reader, reader.uint32());
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return {
            person: isSet(object.person) ? exports.Person.fromJSON(object.person) : undefined,
            course: isSet(object.course) ? exports.Course.fromJSON(object.course) : undefined,
            reset: isSet(object.reset) ? exports.SyncReset.fromJSON(object.reset) : undefined,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.person !== undefined) {
            obj.person = exports.Person.toJSON(message.person);
        }
        if (message.course !== undefined) {
            obj.course = exports.Course.toJSON(message.course);
        }
        if (message.reset !== undefined) {
            obj.reset = exports.SyncReset.toJSON(message.reset);
        }
        return obj;
    },
    create(base) {
        return exports.SyncEvent.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSyncEvent();
        message.person = (object.person !== undefined && object.person !== null)
            ? exports.Person.fromPartial(object.person)
            : undefined;
        message.course = (object.course !== undefined && object.course !== null)
            ? exports.Course.fromPartial(object.course)
            : undefined;
        message.reset = (object.reset !== undefined && object.reset !== null)
            ? exports.SyncReset.fromPartial(object.reset)
            : undefined;
        return message;
    },
};
function createBaseSyncReset() {
    return { reason: "" };
}
exports.SyncReset = {
    encode(message, writer = minimal_1.default.Writer.create()) {
        if (message.reason !== "") {
            writer.uint32(10).string(message.reason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof minimal_1.default.Reader ? input : minimal_1.default.Reader.create(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSyncReset();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if (tag !== 10) {
                        break;
                    }
                    message.reason = reader.string();
                    continue;
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skipType(tag & 7);
        }
        return message;
    },
    fromJSON(object) {
        return { reason: isSet(object.reason) ? globalThis.String(object.reason) : "" };
    },
    toJSON(message) {
        const obj = {};
        if (message.reason !== "") {
            obj.reason = message.reason;
        }
        return obj;
    },
    create(base) {
        return exports.SyncReset.fromPartial(base ?? {});
    },
    fromPartial(object) {
        const message = createBaseSyncReset();
        message.reason = object.reason ?? "";
        return message;
    },
};
exports.SISSyncService = {
    syncPersons: {
        path: "/eduapi.async.SISSync/SyncPersons",
        requestStream: false,
        responseStream: true,
        requestSerialize: (value) => Buffer.from(exports.SyncRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.SyncRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.SyncEvent.encode(value).finish()),
        responseDeserialize: (value) => exports.SyncEvent.decode(value),
    },
    syncCourses: {
        path: "/eduapi.async.SISSync/SyncCourses",
        requestStream: false,
        responseStream: true,
        requestSerialize: (value) => Buffer.from(exports.SyncRequest.encode(value).finish()),
        requestDeserialize: (value) => exports.SyncRequest.decode(value),
        responseSerialize: (value) => Buffer.from(exports.SyncEvent.encode(value).finish()),
        responseDeserialize: (value) => exports.SyncEvent.decode(value),
    },
};
exports.SISSyncClient = (0, grpc_js_1.makeGenericClientConstructor)(exports.SISSyncService, "eduapi.async.SISSync");
function isSet(value) {
    return value !== null && value !== undefined;
}
